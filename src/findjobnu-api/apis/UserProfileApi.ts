/* tslint:disable */
/* eslint-disable */
/**
 * findjobnuAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserProfile,
} from '../models/index';
import {
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models/index';

export interface CreateUserProfileRequest {
    userProfile: UserProfile;
}

export interface DeleteSavedJobRequest {
    userId: string;
    jobId: string;
}

export interface GetSavedJobRequest {
    userId: string;
}

export interface GetUserProfileByUserIdRequest {
    userid: string;
}

export interface ImportLinkedInProfileRequest {
    linkedInId: string;
}

export interface SaveJobRequest {
    userId: string;
    jobId: string;
}

export interface UpdateUserProfileRequest {
    id: number;
    userProfile: UserProfile;
}

/**
 * 
 */
export class UserProfileApi extends runtime.BaseAPI {

    /**
     */
    async createUserProfileRaw(requestParameters: CreateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters['userProfile'] == null) {
            throw new runtime.RequiredError(
                'userProfile',
                'Required parameter "userProfile" was null or undefined when calling createUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/userprofile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileToJSON(requestParameters['userProfile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async createUserProfile(requestParameters: CreateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.createUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSavedJobRaw(requestParameters: DeleteSavedJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteSavedJob().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling deleteSavedJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userprofile/{userId}/savedjobs/{jobId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSavedJob(requestParameters: DeleteSavedJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSavedJobRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getSavedJobRaw(requestParameters: GetSavedJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getSavedJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userprofile/{userId}/savedjobs`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getSavedJob(requestParameters: GetSavedJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getSavedJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserProfileByUserIdRaw(requestParameters: GetUserProfileByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters['userid'] == null) {
            throw new runtime.RequiredError(
                'userid',
                'Required parameter "userid" was null or undefined when calling getUserProfileByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userprofile/{userid}`.replace(`{${"userid"}}`, encodeURIComponent(String(requestParameters['userid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async getUserProfileByUserId(requestParameters: GetUserProfileByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.getUserProfileByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async importLinkedInProfileRaw(requestParameters: ImportLinkedInProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['linkedInId'] == null) {
            throw new runtime.RequiredError(
                'linkedInId',
                'Required parameter "linkedInId" was null or undefined when calling importLinkedInProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userprofile/import-linkedin-profile/{linkedInId}`.replace(`{${"linkedInId"}}`, encodeURIComponent(String(requestParameters['linkedInId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async importLinkedInProfile(requestParameters: ImportLinkedInProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.importLinkedInProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saveJobRaw(requestParameters: SaveJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling saveJob().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling saveJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/userprofile/{userId}/savedjobs/{jobId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async saveJob(requestParameters: SaveJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveJobRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateUserProfile().'
            );
        }

        if (requestParameters['userProfile'] == null) {
            throw new runtime.RequiredError(
                'userProfile',
                'Required parameter "userProfile" was null or undefined when calling updateUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/userprofile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileToJSON(requestParameters['userProfile']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserProfileRaw(requestParameters, initOverrides);
    }

}
