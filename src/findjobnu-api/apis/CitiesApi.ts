/* tslint:disable */
/* eslint-disable */
/**
 * findjobnuAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Cities,
} from '../models/index';
import {
    CitiesFromJSON,
    CitiesToJSON,
} from '../models/index';

export interface GetCitiesByIdRequest {
    id: number;
}

export interface GetCitiesByQueryRequest {
    query: string;
}

/**
 * 
 */
export class CitiesApi extends runtime.BaseAPI {

    /**
     */
    async getAllCitiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Cities>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Cities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CitiesFromJSON));
    }

    /**
     */
    async getAllCities(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Cities>> {
        const response = await this.getAllCitiesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCitiesByIdRaw(requestParameters: GetCitiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cities>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCitiesById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Cities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CitiesFromJSON(jsonValue));
    }

    /**
     */
    async getCitiesById(requestParameters: GetCitiesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cities | null | undefined > {
        const response = await this.getCitiesByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async getCitiesByQueryRaw(requestParameters: GetCitiesByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Cities>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getCitiesByQuery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Cities/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CitiesFromJSON));
    }

    /**
     */
    async getCitiesByQuery(requestParameters: GetCitiesByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Cities> | null | undefined > {
        const response = await this.getCitiesByQueryRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

}
