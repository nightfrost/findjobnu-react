/* tslint:disable */
/* eslint-disable */
/**
 * findjobnuAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BasicInfoDto,
  EducationDto,
  ExperienceDto,
  JobIndexPostsPagedList,
  Profile,
  ProfileDto,
  SkillDto,
} from '../models/index';
import {
    BasicInfoDtoFromJSON,
    BasicInfoDtoToJSON,
    EducationDtoFromJSON,
    EducationDtoToJSON,
    ExperienceDtoFromJSON,
    ExperienceDtoToJSON,
    JobIndexPostsPagedListFromJSON,
    JobIndexPostsPagedListToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    ProfileDtoFromJSON,
    ProfileDtoToJSON,
    SkillDtoFromJSON,
    SkillDtoToJSON,
} from '../models/index';

export interface CreateProfileRequest {
    profile: Profile;
}

export interface GetBasicInfoByUserIdRequest {
    userId: string;
}

export interface GetEducationByUserIdRequest {
    userId: string;
}

export interface GetExperienceByUserIdRequest {
    userId: string;
}

export interface GetProfileByUserIdRequest {
    userId: string;
}

export interface GetSavedJobsByUserIdRequest {
    userId: string;
}

export interface GetSkillsByUserIdRequest {
    userId: string;
}

export interface RemoveSavedJobForUserRequest {
    userId: string;
    jobId: string;
}

export interface SaveJobForUserRequest {
    userId: string;
    jobId: string;
}

export interface UpdateProfileRequest {
    id: number;
    profile: Profile;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     */
    async createProfileRaw(requestParameters: CreateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling createProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileToJSON(requestParameters['profile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     */
    async createProfile(requestParameters: CreateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBasicInfoByUserIdRaw(requestParameters: GetBasicInfoByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicInfoDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getBasicInfoByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}/basicinfo`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicInfoDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBasicInfoByUserId(requestParameters: GetBasicInfoByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicInfoDto> {
        const response = await this.getBasicInfoByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEducationByUserIdRaw(requestParameters: GetEducationByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EducationDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getEducationByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}/education`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EducationDtoFromJSON));
    }

    /**
     */
    async getEducationByUserId(requestParameters: GetEducationByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EducationDto>> {
        const response = await this.getEducationByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getExperienceByUserIdRaw(requestParameters: GetExperienceByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExperienceDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getExperienceByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}/experience`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExperienceDtoFromJSON));
    }

    /**
     */
    async getExperienceByUserId(requestParameters: GetExperienceByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExperienceDto>> {
        const response = await this.getExperienceByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProfileByUserIdRaw(requestParameters: GetProfileByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getProfileByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDtoFromJSON(jsonValue));
    }

    /**
     */
    async getProfileByUserId(requestParameters: GetProfileByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDto> {
        const response = await this.getProfileByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSavedJobsByUserIdRaw(requestParameters: GetSavedJobsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobIndexPostsPagedList>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getSavedJobsByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}/savedjobs`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobIndexPostsPagedListFromJSON(jsonValue));
    }

    /**
     */
    async getSavedJobsByUserId(requestParameters: GetSavedJobsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobIndexPostsPagedList> {
        const response = await this.getSavedJobsByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSkillsByUserIdRaw(requestParameters: GetSkillsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SkillDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getSkillsByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}/skills`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillDtoFromJSON));
    }

    /**
     */
    async getSkillsByUserId(requestParameters: GetSkillsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SkillDto>> {
        const response = await this.getSkillsByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async importLinkedInProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/linkedin/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     */
    async importLinkedInProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.importLinkedInProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeSavedJobForUserRaw(requestParameters: RemoveSavedJobForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeSavedJobForUser().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling removeSavedJobForUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}/savedjobs/{jobId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeSavedJobForUser(requestParameters: RemoveSavedJobForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSavedJobForUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async saveJobForUserRaw(requestParameters: SaveJobForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling saveJobForUser().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling saveJobForUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/{userId}/savedjobs/{jobId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async saveJobForUser(requestParameters: SaveJobForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveJobForUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProfile().'
            );
        }

        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling updateProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/profile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileToJSON(requestParameters['profile']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateProfile(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProfileRaw(requestParameters, initOverrides);
    }

}
