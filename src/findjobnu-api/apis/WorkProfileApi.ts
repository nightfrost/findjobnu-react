/* tslint:disable */
/* eslint-disable */
/**
 * findjobnuAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkProfile,
} from '../models/index';
import {
    WorkProfileFromJSON,
    WorkProfileToJSON,
} from '../models/index';

export interface CreateWorkProfileRequest {
    workProfile: WorkProfile;
}

export interface DeleteWorkProfileRequest {
    id: number;
}

export interface GetWorkProfileByUserProfileIdRequest {
    userProfileId: number;
}

export interface UpdateWorkProfileRequest {
    id: number;
    workProfile: WorkProfile;
}

/**
 * 
 */
export class WorkProfileApi extends runtime.BaseAPI {

    /**
     */
    async createWorkProfileRaw(requestParameters: CreateWorkProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workProfile'] == null) {
            throw new runtime.RequiredError(
                'workProfile',
                'Required parameter "workProfile" was null or undefined when calling createWorkProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workprofile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkProfileToJSON(requestParameters['workProfile']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createWorkProfile(requestParameters: CreateWorkProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createWorkProfileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWorkProfileRaw(requestParameters: DeleteWorkProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorkProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workprofile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWorkProfile(requestParameters: DeleteWorkProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkProfileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getWorkProfileByUserProfileIdRaw(requestParameters: GetWorkProfileByUserProfileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkProfile>> {
        if (requestParameters['userProfileId'] == null) {
            throw new runtime.RequiredError(
                'userProfileId',
                'Required parameter "userProfileId" was null or undefined when calling getWorkProfileByUserProfileId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/workprofile/user/{userProfileId}`.replace(`{${"userProfileId"}}`, encodeURIComponent(String(requestParameters['userProfileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkProfileFromJSON(jsonValue));
    }

    /**
     */
    async getWorkProfileByUserProfileId(requestParameters: GetWorkProfileByUserProfileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkProfile> {
        const response = await this.getWorkProfileByUserProfileIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWorkProfileRaw(requestParameters: UpdateWorkProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWorkProfile().'
            );
        }

        if (requestParameters['workProfile'] == null) {
            throw new runtime.RequiredError(
                'workProfile',
                'Required parameter "workProfile" was null or undefined when calling updateWorkProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/workprofile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkProfileToJSON(requestParameters['workProfile']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateWorkProfile(requestParameters: UpdateWorkProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateWorkProfileRaw(requestParameters, initOverrides);
    }

}
